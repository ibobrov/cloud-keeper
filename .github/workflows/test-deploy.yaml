
name: Java tests with Gradle

on:
  push:
    branches: [ "main" ]

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      src: ${{ steps.filter.outputs.src }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            src:
              - 'src/**'

  test:
    needs: changes
    if: ${{ needs.changes.outputs.src == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/test
      SPRING_DATASOURCE_DB: test
      SPRING_DATASOURCE_USERNAME: test
      SPRING_DATASOURCE_PASSWORD: testpass
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      REDIS_PASSWORD: testpass
      MINIO_ENDPOINT: http://localhost:9000
      MINIO_ROOT_USER: test
      MINIO_ROOT_PASSWORD: testpass
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Test with Gradle Wrapper
        run: ./gradlew test

  deploy:
    needs: test
    if: ${{ always() && (needs.test.result == 'success' || needs.test.result == 'skipped') }}
    name: Deploy
    runs-on: self-hosted
    environment:
      name: production
    env:
      SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
      SPRING_DATASOURCE_DB: ${{ secrets.SPRING_DATASOURCE_DB }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
      MINIO_ROOT_USER: ${{ secrets.MINIO_ROOT_USER }}
      MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run docker compose
        run: |
          git checkout main &&
          git pull &&
          docker compose -f ./compose-prod.yaml down &&
          docker compose -f ./compose-prod.yaml up -d --build &&
          docker system prune --all --force